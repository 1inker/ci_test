name: Build

on:
  push:
    branches: ["test-*"]
    tags: ["*-*ow"]

jobs:
  calc_ver:
    # calculate versions from git tags
    runs-on: ubuntu-latest
    outputs:
      project_ver: ${{steps.vers.outputs.project_ver}}
      build_ver: ${{steps.vers.outputs.build_ver}}
      full_ver: ${{steps.vers.outputs.full_ver}}
      release_flag: ${{steps.vers.outputs.release_flag}}
      release_id: ${{ steps.create_release.outputs.id }}
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Calculate versions
      id: vers
      shell: bash
      run: |
        git fetch --prune --unshallow --tags --force
        GIT_VERSION=`git describe --tags`
        PROJECT_VERSION=`echo $GIT_VERSION | cut -d- -f1`
        BUILD_VERSION=`echo $GIT_VERSION | cut -d- -f2-3 --output-delimiter=.`
        GIT_CHANGE_NUM=`echo $GIT_VERSION | cut -d- -f3`
        if [[ -n "$GIT_CHANGE_NUM" ]] || [[ "$BUILD_VERSION" < "1" ]]; then
          RELEASE_FLAG=OFF
        else
          RELEASE_FLAG=ON
        fi

        echo "::set-output name=project_ver::$PROJECT_VERSION"
        echo "::set-output name=build_ver::$BUILD_VERSION"
        echo "::set-output name=full_ver::$PROJECT_VERSION-$BUILD_VERSION"
        echo "::set-output name=release_flag::$RELEASE_FLAG"

    - name: Get actual compiler
      id: cxx
      shell: bash
      run: |
        OLD_CXX_COMPILER=`which c++`
        OLD_CXX_VERSION=`c++ --version`
        sudo apt update
        sudo apt install -y sudo git cmake libboost-dev g++ build-essential libssl-dev default-jdk python3 python3-pip liblz4-dev ninja-build rpm
        NEW_CXX_COMPILER=`which c++`
        NEW_CXX_VERSION=`c++ --version`
        echo "::set-output name=old_cxx_compiler::$OLD_CXX_COMPILER"
        echo "::set-output name=new_cxx_compiler::$NEW_CXX_COMPILER"
        echo "::set-output name=old_cxx_version::$OLD_CXX_VERSION"
        echo "::set-output name=new_cxx_version::$NEW_CXX_VERSION"

    - name: Display versions
      run: |
        echo "project_ver=${{steps.vers.outputs.project_ver}}"
        echo "build_ver=${{steps.vers.outputs.build_ver}}"
        echo "full_ver=${{steps.vers.outputs.full_ver}}"
        echo "release_flag=${{steps.vers.outputs.release_flag}}"
        echo "old_cxx_compiler=${{steps.cxx.outputs.old_cxx_compiler}}"
        echo "old_cxx_version=${{steps.cxx.outputs.old_cxx_version}}"
        echo "new_cxx_compiler=${{steps.cxx.outputs.new_cxx_compiler}}"
        echo "new_cxx_version=${{steps.cxx.outputs.new_cxx_version}}"

    - name: Create Draft Release
      if: ${{ steps.vers.outputs.release_flag == 'ON' }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{ steps.vers.outputs.full_ver }}"
        release_name:  "v${{ steps.vers.outputs.full_ver }}"
        draft: true
        prerelease: false

  build_linux:
    runs-on: ubuntu-18.04
    needs: [calc_ver]

    steps:
      - name: Initial free space check
        run: |
          echo "Free space:"
          df -h
          free

      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: 'very_big_prefix_to_appese_cpack_and_build_releases/foundationdb'

      - name: Create artifact
        shell: bash
        run: |
          mkdir ${{github.workspace}}/bld
          echo "FDB_RELEASE=${{needs.calc_ver.outputs.release_flag}}" >${{github.workspace}}/bld/artifact.txt
          echo "DBUILD_VERSION=${{needs.calc_ver.outputs.build_ver}}" >>${{github.workspace}}/bld/artifact.txt
          echo "release_upload_url=${{ needs.calc_ver.outputs.release_upload_url }}"

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'

      - name: Free space after wipe
        run: |
          echo "Free space:"
          df -h
          free

      - name: Upload result
        if: ${{ steps.vers.outputs.release_flag == 'ON' }}
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.calc_ver.outputs.release_upload_url }}
          asset_path: |
            ${{github.workspace}}/bld/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: [calc_ver, build_linux]
    if: ${{ needs.calc_ver.outputs.release_flag == 'ON' }}
    runs-on: ubuntu-latest
    steps:
    - name: Set publish info
      id: publish_info 
      run: echo "release_id=${{ needs.calc_ver.outputs.release_id}}"
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ needs.calc_ver.outputs.release_id }}
